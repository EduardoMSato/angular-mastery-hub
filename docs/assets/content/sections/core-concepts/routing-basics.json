{
  "id": "routing-basics",
  "moduleId": "core-concepts",
  "title": "Angular Routing Fundamentals",
  "order": 4,
  "content": "The Angular Router enables navigation from one view to the next as users perform application tasks. It interprets a browser URL as an instruction to navigate to a client-generated view and can pass optional parameters along to the supporting view component that help it decide what specific content to present.\n\nYou can bind the router to links on a page and it will navigate to the appropriate application view when the user clicks a link. You can navigate imperatively when the user clicks a button, selects from a drop box, or in response to some other stimulus.",
  "estimatedTime": "35 minutes",
  "objectives": [
    "Understand Angular routing concepts and setup",
    "Learn route configuration and navigation",
    "Master route parameters and query parameters",
    "Implement route guards and lazy loading"
  ],
  "codeExamples": [
    {
      "title": "Basic Router Setup",
      "language": "typescript",
      "code": "// app.routes.ts (Angular 17+ standalone)\nimport { Routes } from '@angular/router';\nimport { HomeComponent } from './pages/home/home.component';\nimport { AboutComponent } from './pages/about/about.component';\nimport { ContactComponent } from './pages/contact/contact.component';\nimport { ProductListComponent } from './pages/products/product-list.component';\nimport { ProductDetailComponent } from './pages/products/product-detail.component';\nimport { NotFoundComponent } from './pages/not-found/not-found.component';\n\nexport const routes: Routes = [\n  // Basic routes\n  { path: '', redirectTo: '/home', pathMatch: 'full' },\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n  { path: 'contact', component: ContactComponent },\n  \n  // Routes with parameters\n  { path: 'products', component: ProductListComponent },\n  { path: 'products/:id', component: ProductDetailComponent },\n  \n  // Lazy loaded routes (will be covered in advanced topics)\n  {\n    path: 'admin',\n    loadChildren: () => import('./admin/admin.routes').then(m => m.adminRoutes)\n  },\n  \n  // Wildcard route (must be last)\n  { path: '**', component: NotFoundComponent }\n];\n\n// main.ts\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { provideRouter } from '@angular/router';\nimport { AppComponent } from './app/app.component';\nimport { routes } from './app/app.routes';\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideRouter(routes),\n    // other providers...\n  ]\n}).catch(err => console.error(err));\n\n// app.component.ts\nimport { Component } from '@angular/core';\nimport { RouterOutlet, RouterLink, RouterLinkActive } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, RouterOutlet, RouterLink, RouterLinkActive],\n  template: `\n    <nav class=\"navbar\">\n      <div class=\"nav-brand\">\n        <a routerLink=\"/home\">My App</a>\n      </div>\n      <ul class=\"nav-links\">\n        <li>\n          <a routerLink=\"/home\" \n             routerLinkActive=\"active\"\n             [routerLinkActiveOptions]=\"{ exact: true }\">\n            Home\n          </a>\n        </li>\n        <li>\n          <a routerLink=\"/about\" routerLinkActive=\"active\">\n            About\n          </a>\n        </li>\n        <li>\n          <a routerLink=\"/products\" routerLinkActive=\"active\">\n            Products\n          </a>\n        </li>\n        <li>\n          <a routerLink=\"/contact\" routerLinkActive=\"active\">\n            Contact\n          </a>\n        </li>\n      </ul>\n    </nav>\n    \n    <main class=\"main-content\">\n      <router-outlet></router-outlet>\n    </main>\n  `,\n  styles: [`\n    .navbar {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 1rem 2rem;\n      background: #333;\n      color: white;\n    }\n    .nav-brand a {\n      color: white;\n      text-decoration: none;\n      font-size: 1.5rem;\n      font-weight: bold;\n    }\n    .nav-links {\n      display: flex;\n      list-style: none;\n      margin: 0;\n      padding: 0;\n      gap: 2rem;\n    }\n    .nav-links a {\n      color: white;\n      text-decoration: none;\n      padding: 0.5rem 1rem;\n      border-radius: 4px;\n      transition: background-color 0.3s;\n    }\n    .nav-links a:hover {\n      background-color: rgba(255, 255, 255, 0.1);\n    }\n    .nav-links a.active {\n      background-color: #007bff;\n    }\n    .main-content {\n      padding: 2rem;\n    }\n  `]\n})\nexport class AppComponent {\n  title = 'routing-app';\n}",
      "explanation": "This example shows the basic setup for Angular routing with standalone components, including route configuration, navigation links, and the router outlet."
    },
    {
      "title": "Route Parameters and Navigation",
      "language": "typescript",
      "code": "// product-detail.component.ts\nimport { Component, OnInit, inject } from '@angular/core';\nimport { ActivatedRoute, Router, ParamMap } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { switchMap, map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\ninterface Product {\n  id: number;\n  name: string;\n  price: number;\n  description: string;\n  category: string;\n  imageUrl: string;\n}\n\n@Component({\n  selector: 'app-product-detail',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"product-detail\" *ngIf=\"product$ | async as product\">\n      <div class=\"product-header\">\n        <button (click)=\"goBack()\" class=\"back-btn\">\n          ‚Üê Back to Products\n        </button>\n        <h1>{{ product.name }}</h1>\n      </div>\n      \n      <div class=\"product-content\">\n        <div class=\"product-image\">\n          <img [src]=\"product.imageUrl\" [alt]=\"product.name\">\n        </div>\n        \n        <div class=\"product-info\">\n          <p class=\"price\">${{ product.price | number:'1.2-2' }}</p>\n          <p class=\"category\">Category: {{ product.category }}</p>\n          <p class=\"description\">{{ product.description }}</p>\n          \n          <div class=\"actions\">\n            <button (click)=\"addToCart(product)\" class=\"add-to-cart-btn\">\n              Add to Cart\n            </button>\n            <button (click)=\"editProduct(product.id)\" class=\"edit-btn\">\n              Edit Product\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Query Parameters Demo -->\n      <div class=\"related-products\">\n        <h3>Related Products</h3>\n        <button (click)=\"showRelated('category')\" class=\"filter-btn\">\n          Same Category\n        </button>\n        <button (click)=\"showRelated('price')\" class=\"filter-btn\">\n          Similar Price\n        </button>\n        <button (click)=\"clearFilters()\" class=\"filter-btn\">\n          Clear Filters\n        </button>\n      </div>\n    </div>\n    \n    <div *ngIf=\"!(product$ | async)\" class=\"loading\">\n      <p>Loading product...</p>\n    </div>\n  `,\n  styles: [`\n    .product-detail {\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    .product-header {\n      margin-bottom: 20px;\n    }\n    .back-btn {\n      background: #6c757d;\n      color: white;\n      border: none;\n      padding: 10px 15px;\n      border-radius: 4px;\n      cursor: pointer;\n      margin-bottom: 15px;\n    }\n    .product-content {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 30px;\n      margin-bottom: 30px;\n    }\n    .product-image img {\n      width: 100%;\n      height: auto;\n      border-radius: 8px;\n    }\n    .product-info {\n      display: flex;\n      flex-direction: column;\n      gap: 15px;\n    }\n    .price {\n      font-size: 2rem;\n      font-weight: bold;\n      color: #28a745;\n    }\n    .category {\n      font-style: italic;\n      color: #6c757d;\n    }\n    .actions {\n      display: flex;\n      gap: 10px;\n    }\n    .add-to-cart-btn {\n      background: #28a745;\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 1rem;\n    }\n    .edit-btn {\n      background: #007bff;\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .related-products {\n      border-top: 1px solid #ddd;\n      padding-top: 20px;\n    }\n    .filter-btn {\n      background: #f8f9fa;\n      border: 1px solid #dee2e6;\n      padding: 8px 16px;\n      margin-right: 10px;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .loading {\n      text-align: center;\n      padding: 40px;\n    }\n  `]\n})\nexport class ProductDetailComponent implements OnInit {\n  private route = inject(ActivatedRoute);\n  private router = inject(Router);\n  \n  product$!: Observable<Product>;\n  \n  // Mock product data\n  private products: Product[] = [\n    {\n      id: 1,\n      name: 'Laptop Pro',\n      price: 1299.99,\n      description: 'High-performance laptop for professionals',\n      category: 'Electronics',\n      imageUrl: 'assets/images/laptop.jpg'\n    },\n    {\n      id: 2,\n      name: 'Wireless Headphones',\n      price: 199.99,\n      description: 'Premium wireless headphones with noise cancellation',\n      category: 'Electronics',\n      imageUrl: 'assets/images/headphones.jpg'\n    }\n  ];\n\n  ngOnInit(): void {\n    this.product$ = this.route.paramMap.pipe(\n      switchMap((params: ParamMap) => {\n        const id = Number(params.get('id'));\n        return this.getProduct(id);\n      })\n    );\n    \n    // Subscribe to query parameters\n    this.route.queryParams.subscribe(params => {\n      const filter = params['filter'];\n      const value = params['value'];\n      if (filter && value) {\n        console.log(`Filtering by ${filter}: ${value}`);\n        // Implement filtering logic here\n      }\n    });\n  }\n\n  private getProduct(id: number): Observable<Product> {\n    const product = this.products.find(p => p.id === id);\n    return new Observable(observer => {\n      setTimeout(() => {\n        if (product) {\n          observer.next(product);\n        } else {\n          observer.error(`Product with id ${id} not found`);\n        }\n        observer.complete();\n      }, 500); // Simulate network delay\n    });\n  }\n\n  goBack(): void {\n    this.router.navigate(['/products']);\n  }\n\n  addToCart(product: Product): void {\n    console.log('Added to cart:', product.name);\n    // Implement cart functionality\n  }\n\n  editProduct(productId: number): void {\n    this.router.navigate(['/products', productId, 'edit']);\n  }\n\n  showRelated(filterType: string): void {\n    this.product$.subscribe(product => {\n      const queryParams: any = { filter: filterType };\n      \n      if (filterType === 'category') {\n        queryParams.value = product.category;\n      } else if (filterType === 'price') {\n        queryParams.value = product.price;\n      }\n      \n      this.router.navigate(['/products'], { queryParams });\n    });\n  }\n\n  clearFilters(): void {\n    this.router.navigate(['/products']);\n  }\n}\n\n// product-list.component.ts\nimport { Component, OnInit, inject } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-product-list',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"product-list\">\n      <h2>Products</h2>\n      \n      <div class=\"filters\" *ngIf=\"currentFilter\">\n        <p>Filtered by {{ currentFilter }}: {{ currentFilterValue }}</p>\n        <button (click)=\"clearFilters()\">Clear Filters</button>\n      </div>\n      \n      <div class=\"products-grid\">\n        <div *ngFor=\"let product of filteredProducts\" \n             class=\"product-card\"\n             (click)=\"viewProduct(product.id)\">\n          <h3>{{ product.name }}</h3>\n          <p class=\"price\">${{ product.price | number:'1.2-2' }}</p>\n          <p class=\"category\">{{ product.category }}</p>\n          <button (click)=\"$event.stopPropagation(); viewProduct(product.id)\"\n                  class=\"view-btn\">\n            View Details\n          </button>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .product-list {\n      padding: 20px;\n    }\n    .filters {\n      background: #f8f9fa;\n      padding: 15px;\n      border-radius: 4px;\n      margin-bottom: 20px;\n    }\n    .products-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n      gap: 20px;\n    }\n    .product-card {\n      border: 1px solid #ddd;\n      padding: 15px;\n      border-radius: 8px;\n      cursor: pointer;\n      transition: transform 0.2s;\n    }\n    .product-card:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n    }\n    .price {\n      font-size: 1.2rem;\n      font-weight: bold;\n      color: #28a745;\n    }\n    .view-btn {\n      background: #007bff;\n      color: white;\n      border: none;\n      padding: 8px 16px;\n      border-radius: 4px;\n      cursor: pointer;\n      margin-top: 10px;\n    }\n  `]\n})\nexport class ProductListComponent implements OnInit {\n  private router = inject(Router);\n  private route = inject(ActivatedRoute);\n  \n  products: Product[] = [\n    {\n      id: 1,\n      name: 'Laptop Pro',\n      price: 1299.99,\n      description: 'High-performance laptop',\n      category: 'Electronics',\n      imageUrl: 'assets/images/laptop.jpg'\n    },\n    {\n      id: 2,\n      name: 'Wireless Headphones',\n      price: 199.99,\n      description: 'Premium wireless headphones',\n      category: 'Electronics',\n      imageUrl: 'assets/images/headphones.jpg'\n    }\n  ];\n  \n  filteredProducts: Product[] = [];\n  currentFilter: string | null = null;\n  currentFilterValue: string | null = null;\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      this.currentFilter = params['filter'] || null;\n      this.currentFilterValue = params['value'] || null;\n      this.applyFilters();\n    });\n  }\n\n  private applyFilters(): void {\n    this.filteredProducts = this.products;\n    \n    if (this.currentFilter && this.currentFilterValue) {\n      this.filteredProducts = this.products.filter(product => {\n        if (this.currentFilter === 'category') {\n          return product.category === this.currentFilterValue;\n        } else if (this.currentFilter === 'price') {\n          const targetPrice = Number(this.currentFilterValue);\n          return Math.abs(product.price - targetPrice) < 200;\n        }\n        return true;\n      });\n    }\n  }\n\n  viewProduct(productId: number): void {\n    this.router.navigate(['/products', productId]);\n  }\n\n  clearFilters(): void {\n    this.router.navigate(['/products']);\n  }\n}",
      "explanation": "This example demonstrates route parameters, query parameters, programmatic navigation, and parameter handling in Angular components."
    }
  ],
  "exercises": [
    {
      "title": "Build a Multi-Level Navigation System",
      "description": "Create a navigation system with nested routes, breadcrumbs, and route guards.",
      "hints": [
        "Set up nested routes with children",
        "Implement breadcrumb navigation",
        "Add route guards for authentication",
        "Handle route data and resolve",
        "Implement proper error handling for missing routes"
      ],
      "solution": "// Multi-level routing implementation\n// This would include nested routes, guards, breadcrumbs, and advanced navigation patterns\n// demonstrating enterprise-level routing architecture."
    }
  ],
  "nextSection": null,
  "previousSection": "forms-reactive"
}