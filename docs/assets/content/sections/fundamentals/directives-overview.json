{
  "id": "directives-overview",
  "moduleId": "fundamentals",
  "title": "Directives Overview",
  "content": "<h2>Angular Directives</h2><p>Directives are instructions in the DOM that tell Angular how to transform or manipulate elements. They are one of Angular's most powerful features, allowing you to extend HTML with custom behavior and dynamic content manipulation.</p><h3>Types of Directives</h3><p>Angular has three types of directives:</p><ul><li><strong>Component Directives:</strong> Directives with templates (components are actually a type of directive)</li><li><strong>Structural Directives:</strong> Change the DOM layout by adding or removing elements (*ngIf, *ngFor)</li><li><strong>Attribute Directives:</strong> Change the appearance or behavior of existing elements (ngClass, ngStyle)</li></ul><h3>Structural Directives</h3><p>Structural directives reshape the DOM by adding, removing, or replacing elements. They're prefixed with an asterisk (*) which is syntactic sugar for more complex template syntax.</p><h4>Common Structural Directives:</h4><ul><li><strong>*ngIf:</strong> Conditionally includes/excludes elements from the DOM</li><li><strong>*ngFor:</strong> Repeats elements for each item in a collection</li><li><strong>*ngSwitch:</strong> Conditionally displays one element from several alternatives</li></ul><h3>Attribute Directives</h3><p>Attribute directives modify the appearance, behavior, or properties of existing DOM elements without changing the DOM structure.</p><h4>Built-in Attribute Directives:</h4><ul><li><strong>ngClass:</strong> Dynamically adds/removes CSS classes</li><li><strong>ngStyle:</strong> Dynamically sets inline styles</li><li><strong>ngModel:</strong> Enables two-way data binding for form elements</li></ul><h3>Directive Microsyntax</h3><p>Angular provides special syntax for structural directives to make templates more readable and expressive. Understanding this syntax helps you write more powerful templates.</p><h3>Performance Considerations</h3><ul><li>Use trackBy functions with *ngFor to improve performance</li><li>Be cautious with complex expressions in directive bindings</li><li>Consider using OnPush change detection with directives</li><li>Avoid deeply nested structural directives</li></ul><h3>Custom Directives</h3><p>While this section focuses on built-in directives, Angular allows you to create custom directives for reusable DOM manipulation and behavior.</p>",
  "codeExamples": [
    {
      "id": "ngif-directive",
      "title": "*ngIf - Conditional Rendering",
      "description": "Use *ngIf to conditionally show or hide elements based on component state.",
      "code": "// Component\nexport class ConditionalComponent {\n  isLoggedIn = false;\n  user: any = null;\n  showDetails = false;\n  userRole = 'guest'; // 'admin', 'user', 'guest'\n  messages: string[] = [];\n  loadingData = false;\n  error: string | null = null;\n  \n  login() {\n    this.loadingData = true;\n    \n    // Simulate login process\n    setTimeout(() => {\n      this.isLoggedIn = true;\n      this.user = {\n        id: 1,\n        name: 'John Doe',\n        email: 'john@example.com',\n        avatar: 'assets/john.jpg'\n      };\n      this.userRole = 'user';\n      this.messages = ['Welcome back!', 'You have 3 new notifications'];\n      this.loadingData = false;\n    }, 2000);\n  }\n  \n  logout() {\n    this.isLoggedIn = false;\n    this.user = null;\n    this.userRole = 'guest';\n    this.messages = [];\n    this.showDetails = false;\n  }\n  \n  toggleDetails() {\n    this.showDetails = !this.showDetails;\n  }\n  \n  simulateError() {\n    this.error = 'Failed to load user data. Please try again.';\n    setTimeout(() => this.error = null, 3000);\n  }\n}\n\n<!-- Template -->\n<div class=\"conditional-demo\">\n  <!-- Loading State -->\n  <div *ngIf=\"loadingData\" class=\"loading\">\n    <p>üîÑ Logging in...</p>\n  </div>\n  \n  <!-- Error Message -->\n  <div *ngIf=\"error\" class=\"error-message\">\n    <p>‚ùå {{ error }}</p>\n  </div>\n  \n  <!-- Not Logged In -->\n  <div *ngIf=\"!isLoggedIn && !loadingData\" class=\"login-section\">\n    <h3>Please Log In</h3>\n    <p>You need to log in to access this content.</p>\n    <button (click)=\"login()\" class=\"btn-primary\">\n      Log In\n    </button>\n    <button (click)=\"simulateError()\" class=\"btn-secondary\">\n      Simulate Error\n    </button>\n  </div>\n  \n  <!-- Logged In Content -->\n  <div *ngIf=\"isLoggedIn && !loadingData\" class=\"user-content\">\n    <div class=\"user-header\">\n      <h3>Welcome, {{ user?.name }}!</h3>\n      <button (click)=\"logout()\" class=\"btn-secondary\">\n        Logout\n      </button>\n    </div>\n    \n    <!-- User Details Toggle -->\n    <div class=\"user-info\">\n      <button (click)=\"toggleDetails()\" class=\"btn-info\">\n        {{ showDetails ? 'Hide' : 'Show' }} Details\n      </button>\n      \n      <!-- Conditional User Details -->\n      <div *ngIf=\"showDetails\" class=\"user-details\">\n        <h4>User Information</h4>\n        <p><strong>ID:</strong> {{ user?.id }}</p>\n        <p><strong>Email:</strong> {{ user?.email }}</p>\n        <p><strong>Role:</strong> {{ userRole }}</p>\n        \n        <!-- Admin-only content -->\n        <div *ngIf=\"userRole === 'admin'\" class=\"admin-panel\">\n          <h5>üîß Admin Panel</h5>\n          <p>You have administrative privileges.</p>\n        </div>\n        \n        <!-- User-specific content -->\n        <div *ngIf=\"userRole === 'user'\" class=\"user-panel\">\n          <h5>üë§ User Dashboard</h5>\n          <p>Welcome to your personal dashboard.</p>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Messages Section -->\n    <div *ngIf=\"messages.length > 0\" class=\"messages\">\n      <h4>Messages ({{ messages.length }})</h4>\n      <div *ngFor=\"let message of messages; let i = index\" class=\"message\">\n        <span class=\"message-number\">{{ i + 1 }}.</span>\n        <span class=\"message-text\">{{ message }}</span>\n      </div>\n    </div>\n    \n    <!-- No Messages -->\n    <div *ngIf=\"messages.length === 0\" class=\"no-messages\">\n      <p>üì≠ No new messages</p>\n    </div>\n  </div>\n  \n  <!-- ngIf with else template -->\n  <div class=\"status-section\">\n    <h4>Account Status</h4>\n    <div *ngIf=\"isLoggedIn; else loggedOutTemplate\">\n      <p>‚úÖ You are logged in</p>\n    </div>\n    \n    <ng-template #loggedOutTemplate>\n      <p>‚ùå You are logged out</p>\n    </ng-template>\n  </div>\n  \n  <!-- Complex conditions -->\n  <div *ngIf=\"isLoggedIn && userRole === 'admin' && !loadingData\" class=\"admin-actions\">\n    <h4>üîê Admin Actions</h4>\n    <button class=\"btn-warning\">Manage Users</button>\n    <button class=\"btn-warning\">System Settings</button>\n  </div>\n</div>",
      "language": "typescript",
      "isEditable": true,
      "explanation": "*ngIf removes or adds elements to the DOM based on the truthiness of the expression. Use it with else templates for alternative content and combine conditions for complex logic.",
      "expectedOutput": "Dynamic content that appears and disappears based on user authentication and role"
    },
    {
      "id": "ngfor-directive",
      "title": "*ngFor - List Rendering and Iteration",
      "description": "Use *ngFor to dynamically generate lists and handle collections of data.",
      "code": "// Component\nexport class ListComponent {\n  products = [\n    { id: 1, name: 'Laptop', price: 999, category: 'Electronics', inStock: true, rating: 4.5 },\n    { id: 2, name: 'Book', price: 25, category: 'Education', inStock: true, rating: 4.8 },\n    { id: 3, name: 'Coffee Mug', price: 15, category: 'Kitchen', inStock: false, rating: 4.2 },\n    { id: 4, name: 'Headphones', price: 199, category: 'Electronics', inStock: true, rating: 4.6 },\n    { id: 5, name: 'Desk Chair', price: 299, category: 'Furniture', inStock: true, rating: 4.3 }\n  ];\n  \n  categories = ['All', 'Electronics', 'Education', 'Kitchen', 'Furniture'];\n  selectedCategory = 'All';\n  \n  users = [\n    { id: 1, name: 'Alice', skills: ['Angular', 'TypeScript', 'RxJS'] },\n    { id: 2, name: 'Bob', skills: ['React', 'JavaScript'] },\n    { id: 3, name: 'Charlie', skills: ['Vue', 'Python', 'Django'] }\n  ];\n  \n  matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ];\n  \n  emptyList: any[] = [];\n  \n  // Filtered products based on category\n  get filteredProducts() {\n    if (this.selectedCategory === 'All') {\n      return this.products;\n    }\n    return this.products.filter(p => p.category === this.selectedCategory);\n  }\n  \n  // TrackBy function for performance\n  trackByProductId(index: number, product: any): number {\n    return product.id;\n  }\n  \n  trackByUserId(index: number, user: any): number {\n    return user.id;\n  }\n  \n  addProduct() {\n    const newProduct = {\n      id: this.products.length + 1,\n      name: `Product ${this.products.length + 1}`,\n      price: Math.floor(Math.random() * 500) + 50,\n      category: 'Electronics',\n      inStock: Math.random() > 0.3,\n      rating: Math.round((Math.random() * 2 + 3) * 10) / 10\n    };\n    this.products.push(newProduct);\n  }\n  \n  removeProduct(productId: number) {\n    this.products = this.products.filter(p => p.id !== productId);\n  }\n  \n  onCategoryChange(category: string) {\n    this.selectedCategory = category;\n  }\n}\n\n<!-- Template -->\n<div class=\"list-demo\">\n  <!-- Category Filter -->\n  <div class=\"category-filter\">\n    <h3>Filter by Category:</h3>\n    <button \n      *ngFor=\"let category of categories; trackBy: trackByProductId\"\n      (click)=\"onCategoryChange(category)\"\n      [class.active]=\"selectedCategory === category\"\n      class=\"category-btn\">\n      {{ category }}\n    </button>\n  </div>\n  \n  <!-- Product List with ngFor -->\n  <div class=\"product-section\">\n    <div class=\"section-header\">\n      <h3>Products ({{ filteredProducts.length }})</h3>\n      <button (click)=\"addProduct()\" class=\"btn-primary\">\n        Add Product\n      </button>\n    </div>\n    \n    <!-- Products Grid -->\n    <div class=\"products-grid\">\n      <div \n        *ngFor=\"let product of filteredProducts; \n               let i = index; \n               let first = first; \n               let last = last; \n               let even = even; \n               let odd = odd;\n               trackBy: trackByProductId\" \n        class=\"product-card\"\n        [class.first]=\"first\"\n        [class.last]=\"last\"\n        [class.even]=\"even\"\n        [class.odd]=\"odd\"\n        [class.out-of-stock]=\"!product.inStock\">\n        \n        <div class=\"product-header\">\n          <h4>{{ product.name }}</h4>\n          <span class=\"product-index\">#{{ i + 1 }}</span>\n        </div>\n        \n        <div class=\"product-info\">\n          <p class=\"price\">${{ product.price }}</p>\n          <p class=\"category\">{{ product.category }}</p>\n          <p class=\"rating\">‚≠ê {{ product.rating }}/5</p>\n          <p class=\"stock\" [class.out-of-stock]=\"!product.inStock\">\n            {{ product.inStock ? '‚úÖ In Stock' : '‚ùå Out of Stock' }}\n          </p>\n        </div>\n        \n        <div class=\"product-actions\">\n          <button (click)=\"removeProduct(product.id)\" class=\"btn-danger\">\n            Remove\n          </button>\n        </div>\n        \n        <!-- Position indicators -->\n        <div class=\"position-indicators\">\n          <span *ngIf=\"first\" class=\"badge first-badge\">First</span>\n          <span *ngIf=\"last\" class=\"badge last-badge\">Last</span>\n          <span class=\"badge index-badge\">{{ even ? 'Even' : 'Odd' }}</span>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Empty state -->\n    <div *ngIf=\"filteredProducts.length === 0\" class=\"empty-state\">\n      <p>üì¶ No products found in category \"{{ selectedCategory }}\"</p>\n    </div>\n  </div>\n  \n  <!-- Nested ngFor - Users and Skills -->\n  <div class=\"users-section\">\n    <h3>Users and Skills</h3>\n    <div class=\"users-list\">\n      <div \n        *ngFor=\"let user of users; trackBy: trackByUserId\" \n        class=\"user-item\">\n        <h4>{{ user.name }}</h4>\n        <div class=\"skills\">\n          <span \n            *ngFor=\"let skill of user.skills; let skillIndex = index\" \n            class=\"skill-tag\"\n            [class.primary-skill]=\"skillIndex === 0\">\n            {{ skill }}\n            <span *ngIf=\"skillIndex === 0\" class=\"primary-indicator\"> (Primary)</span>\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  <!-- Matrix example - nested ngFor -->\n  <div class=\"matrix-section\">\n    <h3>Matrix (Nested ngFor)</h3>\n    <table class=\"matrix-table\">\n      <tr *ngFor=\"let row of matrix; let rowIndex = index\">\n        <td \n          *ngFor=\"let cell of row; let colIndex = index\"\n          class=\"matrix-cell\"\n          [class.diagonal]=\"rowIndex === colIndex\">\n          {{ cell }}\n          <small>({{ rowIndex }},{{ colIndex }})</small>\n        </td>\n      </tr>\n    </table>\n  </div>\n  \n  <!-- ngFor with object properties -->\n  <div class=\"object-iteration\">\n    <h3>Object Properties (using keyvalue pipe)</h3>\n    <div *ngFor=\"let item of products[0] | keyvalue\" class=\"property-item\">\n      <strong>{{ item.key }}:</strong> {{ item.value }}\n    </div>\n  </div>\n  \n  <!-- Performance tip -->\n  <div class=\"performance-tip\">\n    <h4>üí° Performance Tip</h4>\n    <p>Always use trackBy functions with *ngFor when working with dynamic lists to improve performance!</p>\n  </div>\n</div>",
      "language": "typescript",
      "isEditable": true,
      "explanation": "*ngFor repeats elements for each item in a collection. It provides local variables like index, first, last, even, and odd. Use trackBy functions to optimize performance with dynamic lists.",
      "expectedOutput": "Dynamic lists with filtering, nested iterations, and performance optimizations"
    },
    {
      "id": "ngclass-ngstyle",
      "title": "ngClass and ngStyle - Dynamic Styling",
      "description": "Use ngClass and ngStyle to dynamically apply CSS classes and styles based on component state.",
      "code": "// Component\nexport class StylingComponent {\n  // Theme and appearance\n  currentTheme = 'light'; // 'light', 'dark', 'blue'\n  fontSize = 16;\n  \n  // UI state\n  isLoading = false;\n  isError = false;\n  isSuccess = false;\n  \n  // Dynamic content\n  messages = [\n    { id: 1, text: 'Welcome to the app!', type: 'info', priority: 'low' },\n    { id: 2, text: 'Please verify your email', type: 'warning', priority: 'medium' },\n    { id: 3, text: 'Your account has been activated', type: 'success', priority: 'high' },\n    { id: 4, text: 'Failed to save changes', type: 'error', priority: 'high' }\n  ];\n  \n  // Form state\n  formData = {\n    username: '',\n    email: '',\n    password: ''\n  };\n  \n  // Button states\n  buttons = [\n    { id: 1, label: 'Primary', type: 'primary', disabled: false, loading: false },\n    { id: 2, label: 'Secondary', type: 'secondary', disabled: false, loading: false },\n    { id: 3, label: 'Danger', type: 'danger', disabled: true, loading: false },\n    { id: 4, label: 'Loading', type: 'primary', disabled: false, loading: true }\n  ];\n  \n  // Methods\n  changeTheme(theme: string) {\n    this.currentTheme = theme;\n  }\n  \n  adjustFontSize(delta: number) {\n    this.fontSize = Math.max(12, Math.min(24, this.fontSize + delta));\n  }\n  \n  simulateLoading() {\n    this.isLoading = true;\n    this.isError = false;\n    this.isSuccess = false;\n    \n    setTimeout(() => {\n      this.isLoading = false;\n      this.isSuccess = Math.random() > 0.3;\n      this.isError = !this.isSuccess;\n      \n      setTimeout(() => {\n        this.isError = false;\n        this.isSuccess = false;\n      }, 3000);\n    }, 2000);\n  }\n  \n  getMessageIcon(type: string): string {\n    const icons = {\n      info: '‚ÑπÔ∏è',\n      warning: '‚ö†Ô∏è',\n      success: '‚úÖ',\n      error: '‚ùå'\n    };\n    return icons[type as keyof typeof icons] || '‚ÑπÔ∏è';\n  }\n  \n  getFieldValidationClass(field: string): any {\n    const value = this.formData[field as keyof typeof this.formData];\n    return {\n      'field-valid': value.length >= 3,\n      'field-invalid': value.length > 0 && value.length < 3,\n      'field-empty': value.length === 0\n    };\n  }\n  \n  getProgressStyle(progress: number): any {\n    return {\n      width: progress + '%',\n      'background-color': progress < 30 ? '#ff4444' : \n                         progress < 70 ? '#ffaa00' : '#44ff44',\n      transition: 'all 0.3s ease'\n    };\n  }\n}\n\n<!-- Template -->\n<div class=\"styling-demo\" \n     [ngClass]=\"{\n       'theme-light': currentTheme === 'light',\n       'theme-dark': currentTheme === 'dark',\n       'theme-blue': currentTheme === 'blue',\n       'loading-state': isLoading,\n       'error-state': isError,\n       'success-state': isSuccess\n     }\"\n     [ngStyle]=\"{\n       'font-size': fontSize + 'px',\n       'padding': '20px',\n       'transition': 'all 0.3s ease'\n     }\">\n  \n  <!-- Theme Controls -->\n  <div class=\"controls-section\">\n    <h3>Theme and Style Controls</h3>\n    \n    <div class=\"theme-buttons\">\n      <button \n        *ngFor=\"let theme of ['light', 'dark', 'blue']\"\n        (click)=\"changeTheme(theme)\"\n        [ngClass]=\"{\n          'btn-active': currentTheme === theme,\n          'btn-theme': true\n        }\">\n        {{ theme | titlecase }} Theme\n      </button>\n    </div>\n    \n    <div class=\"font-controls\">\n      <label>Font Size: {{ fontSize }}px</label>\n      <button (click)=\"adjustFontSize(-2)\" [disabled]=\"fontSize <= 12\">A-</button>\n      <button (click)=\"adjustFontSize(2)\" [disabled]=\"fontSize >= 24\">A+</button>\n    </div>\n  </div>\n  \n  <!-- Status Section -->\n  <div class=\"status-section\">\n    <h3>Status Indicators</h3>\n    \n    <button (click)=\"simulateLoading()\" class=\"btn-primary\">\n      Trigger Action\n    </button>\n    \n    <!-- Dynamic status display -->\n    <div class=\"status-display\"\n         [ngClass]=\"{\n           'status-loading': isLoading,\n           'status-error': isError,\n           'status-success': isSuccess,\n           'status-idle': !isLoading && !isError && !isSuccess\n         }\"\n         [ngStyle]=\"{\n           'border-width': isLoading ? '3px' : '1px',\n           'animation': isLoading ? 'pulse 1s infinite' : 'none'\n         }\">\n      \n      <div *ngIf=\"isLoading\" class=\"loading-content\">\n        <span class=\"spinner\">üîÑ</span>\n        <p>Processing...</p>\n      </div>\n      \n      <div *ngIf=\"isError\" class=\"error-content\">\n        <span class=\"icon\">‚ùå</span>\n        <p>Something went wrong!</p>\n      </div>\n      \n      <div *ngIf=\"isSuccess\" class=\"success-content\">\n        <span class=\"icon\">‚úÖ</span>\n        <p>Operation completed successfully!</p>\n      </div>\n      \n      <div *ngIf=\"!isLoading && !isError && !isSuccess\" class=\"idle-content\">\n        <span class=\"icon\">‚è∏Ô∏è</span>\n        <p>Ready for action</p>\n      </div>\n    </div>\n  </div>\n  \n  <!-- Messages with Dynamic Classes -->\n  <div class=\"messages-section\">\n    <h3>Dynamic Message Styling</h3>\n    \n    <div *ngFor=\"let message of messages\" \n         class=\"message-item\"\n         [ngClass]=\"{\n           'message-info': message.type === 'info',\n           'message-warning': message.type === 'warning',\n           'message-success': message.type === 'success',\n           'message-error': message.type === 'error',\n           'priority-high': message.priority === 'high',\n           'priority-medium': message.priority === 'medium',\n           'priority-low': message.priority === 'low'\n         }\"\n         [ngStyle]=\"{\n           'border-left-width': message.priority === 'high' ? '5px' : '3px',\n           'font-weight': message.priority === 'high' ? 'bold' : 'normal',\n           'margin-bottom': '10px'\n         }\">\n      \n      <span class=\"message-icon\">{{ getMessageIcon(message.type) }}</span>\n      <span class=\"message-text\">{{ message.text }}</span>\n      <span class=\"message-priority\" \n            [ngClass]=\"'priority-' + message.priority\">\n        {{ message.priority }}\n      </span>\n    </div>\n  </div>\n  \n  <!-- Form with Validation Styling -->\n  <div class=\"form-section\">\n    <h3>Form with Dynamic Validation Styling</h3>\n    \n    <form class=\"validation-form\">\n      <div class=\"form-group\">\n        <label for=\"username\">Username:</label>\n        <input \n          id=\"username\"\n          type=\"text\" \n          [(ngModel)]=\"formData.username\"\n          [ngClass]=\"getFieldValidationClass('username')\"\n          [ngStyle]=\"{\n            'border-color': formData.username.length >= 3 ? '#28a745' : \n                           formData.username.length > 0 ? '#dc3545' : '#ced4da',\n            'background-color': formData.username.length >= 3 ? '#f8fff8' : \n                               formData.username.length > 0 ? '#fff8f8' : '#ffffff'\n          }\"\n          placeholder=\"Enter username (min 3 chars)\">\n        \n        <div class=\"field-status\" \n             [ngClass]=\"{\n               'status-valid': formData.username.length >= 3,\n               'status-invalid': formData.username.length > 0 && formData.username.length < 3,\n               'status-empty': formData.username.length === 0\n             }\">\n          {{ formData.username.length >= 3 ? '‚úì Valid' : \n             formData.username.length > 0 ? '‚úó Too short' : 'Enter username' }}\n        </div>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"email\">Email:</label>\n        <input \n          id=\"email\"\n          type=\"email\" \n          [(ngModel)]=\"formData.email\"\n          [ngClass]=\"getFieldValidationClass('email')\"\n          placeholder=\"Enter email\">\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"password\">Password:</label>\n        <input \n          id=\"password\"\n          type=\"password\" \n          [(ngModel)]=\"formData.password\"\n          [ngClass]=\"getFieldValidationClass('password')\"\n          placeholder=\"Enter password\">\n      </div>\n    </form>\n  </div>\n  \n  <!-- Dynamic Buttons -->\n  <div class=\"buttons-section\">\n    <h3>Dynamic Button Styles</h3>\n    \n    <div class=\"button-grid\">\n      <button \n        *ngFor=\"let btn of buttons\"\n        [ngClass]=\"{\n          'btn-primary': btn.type === 'primary',\n          'btn-secondary': btn.type === 'secondary',\n          'btn-danger': btn.type === 'danger',\n          'btn-loading': btn.loading,\n          'btn-disabled': btn.disabled\n        }\"\n        [ngStyle]=\"{\n          'opacity': btn.disabled ? '0.5' : '1',\n          'cursor': btn.disabled ? 'not-allowed' : 'pointer',\n          'transform': btn.loading ? 'scale(0.95)' : 'scale(1)'\n        }\"\n        [disabled]=\"btn.disabled || btn.loading\">\n        \n        <span *ngIf=\"btn.loading\" class=\"loading-spinner\">‚è≥</span>\n        {{ btn.label }}\n      </button>\n    </div>\n  </div>\n  \n  <!-- Progress Bars -->\n  <div class=\"progress-section\">\n    <h3>Dynamic Progress Indicators</h3>\n    \n    <div *ngFor=\"let progress of [25, 50, 75, 100]; let i = index\" \n         class=\"progress-container\">\n      <label>Progress {{ i + 1 }}: {{ progress }}%</label>\n      <div class=\"progress-bar\">\n        <div class=\"progress-fill\" \n             [ngStyle]=\"getProgressStyle(progress)\">\n          <span class=\"progress-text\" \n                [ngStyle]=\"{\n                  'color': progress > 50 ? '#ffffff' : '#333333'\n                }\">\n            {{ progress }}%\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>",
      "language": "typescript",
      "isEditable": true,
      "explanation": "ngClass dynamically applies CSS classes based on conditions (object, array, or string syntax). ngStyle sets inline styles dynamically. Both are essential for creating responsive, interactive user interfaces.",
      "expectedOutput": "Interactive interface with dynamic theming, validation styling, and responsive visual feedback"
    },
    {
      "id": "ngswitch-directive",
      "title": "*ngSwitch - Multiple Conditional Views",
      "description": "Use *ngSwitch to display one of several alternative templates based on a switch expression.",
      "code": "// Component\nexport class SwitchComponent {\n  // View modes\n  currentView = 'dashboard'; // 'dashboard', 'profile', 'settings', 'help'\n  \n  // User data\n  user = {\n    name: 'Alice Johnson',\n    email: 'alice@example.com',\n    role: 'admin', // 'admin', 'user', 'guest'\n    status: 'active', // 'active', 'inactive', 'pending'\n    preferences: {\n      theme: 'dark',\n      notifications: true,\n      language: 'en'\n    }\n  };\n  \n  // Content type\n  contentType = 'article'; // 'article', 'video', 'podcast', 'image'\n  \n  // Notification type\n  notificationType = 'info'; // 'info', 'warning', 'error', 'success'\n  \n  // Product categories\n  selectedCategory = 'electronics'; // 'electronics', 'books', 'clothing', 'home'\n  \n  // Payment method\n  paymentMethod = 'credit'; // 'credit', 'debit', 'paypal', 'crypto'\n  \n  // Sample data\n  dashboardStats = {\n    totalUsers: 1250,\n    activeUsers: 980,\n    revenue: 45000,\n    orders: 340\n  };\n  \n  notifications = [\n    { id: 1, type: 'info', message: 'System maintenance scheduled for tonight' },\n    { id: 2, type: 'warning', message: 'Your subscription expires in 3 days' },\n    { id: 3, type: 'error', message: 'Failed to process payment' },\n    { id: 4, type: 'success', message: 'Profile updated successfully' }\n  ];\n  \n  // Methods\n  switchView(view: string) {\n    this.currentView = view;\n  }\n  \n  switchContentType(type: string) {\n    this.contentType = type;\n  }\n  \n  switchCategory(category: string) {\n    this.selectedCategory = category;\n  }\n  \n  switchPayment(method: string) {\n    this.paymentMethod = method;\n  }\n  \n  getUserRoleBadge(role: string): string {\n    const badges = {\n      admin: 'üëë Administrator',\n      user: 'üë§ User',\n      guest: 'üë• Guest'\n    };\n    return badges[role as keyof typeof badges] || '‚ùì Unknown';\n  }\n  \n  getStatusColor(status: string): string {\n    const colors = {\n      active: '#28a745',\n      inactive: '#6c757d',\n      pending: '#ffc107'\n    };\n    return colors[status as keyof typeof colors] || '#6c757d';\n  }\n}\n\n<!-- Template -->\n<div class=\"switch-demo\">\n  <!-- Navigation -->\n  <nav class=\"navigation\">\n    <h3>Application Views</h3>\n    <button \n      *ngFor=\"let view of ['dashboard', 'profile', 'settings', 'help']\"\n      (click)=\"switchView(view)\"\n      [class.active]=\"currentView === view\"\n      class=\"nav-button\">\n      {{ view | titlecase }}\n    </button>\n  </nav>\n  \n  <!-- Main Content Area with ngSwitch -->\n  <div class=\"main-content\" [ngSwitch]=\"currentView\">\n    \n    <!-- Dashboard View -->\n    <div *ngSwitchCase=\"'dashboard'\" class=\"dashboard-view\">\n      <h2>üìä Dashboard</h2>\n      \n      <div class=\"stats-grid\">\n        <div class=\"stat-card\">\n          <h3>{{ dashboardStats.totalUsers }}</h3>\n          <p>Total Users</p>\n        </div>\n        <div class=\"stat-card\">\n          <h3>{{ dashboardStats.activeUsers }}</h3>\n          <p>Active Users</p>\n        </div>\n        <div class=\"stat-card\">\n          <h3>${{ dashboardStats.revenue | number }}</h3>\n          <p>Revenue</p>\n        </div>\n        <div class=\"stat-card\">\n          <h3>{{ dashboardStats.orders }}</h3>\n          <p>Orders</p>\n        </div>\n      </div>\n      \n      <!-- User Role Display -->\n      <div class=\"role-section\">\n        <h4>User Role Access</h4>\n        <div [ngSwitch]=\"user.role\" class=\"role-content\">\n          <div *ngSwitchCase=\"'admin'\" class=\"admin-panel\">\n            <h5>üîß Administrator Panel</h5>\n            <p>Full system access and user management capabilities.</p>\n            <button class=\"btn-primary\">Manage Users</button>\n            <button class=\"btn-secondary\">System Settings</button>\n            <button class=\"btn-warning\">View Logs</button>\n          </div>\n          \n          <div *ngSwitchCase=\"'user'\" class=\"user-panel\">\n            <h5>üë§ User Dashboard</h5>\n            <p>Standard user access with personal data management.</p>\n            <button class=\"btn-primary\">Edit Profile</button>\n            <button class=\"btn-secondary\">View History</button>\n          </div>\n          \n          <div *ngSwitchCase=\"'guest'\" class=\"guest-panel\">\n            <h5>üë• Guest Access</h5>\n            <p>Limited access. Please register for full features.</p>\n            <button class=\"btn-primary\">Sign Up</button>\n            <button class=\"btn-secondary\">Learn More</button>\n          </div>\n          \n          <div *ngSwitchDefault class=\"unknown-role\">\n            <h5>‚ùì Unknown Role</h5>\n            <p>Please contact support for access configuration.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Profile View -->\n    <div *ngSwitchCase=\"'profile'\" class=\"profile-view\">\n      <h2>üë§ User Profile</h2>\n      \n      <div class=\"profile-info\">\n        <h3>{{ user.name }}</h3>\n        <p>{{ user.email }}</p>\n        <div class=\"badges\">\n          <span class=\"role-badge\">{{ getUserRoleBadge(user.role) }}</span>\n          <span class=\"status-badge\" \n                [style.background-color]=\"getStatusColor(user.status)\">\n            {{ user.status | titlecase }}\n          </span>\n        </div>\n      </div>\n      \n      <!-- Status-specific content -->\n      <div [ngSwitch]=\"user.status\" class=\"status-content\">\n        <div *ngSwitchCase=\"'active'\" class=\"active-status\">\n          <h4>‚úÖ Account Active</h4>\n          <p>Your account is fully operational. Enjoy all features!</p>\n        </div>\n        \n        <div *ngSwitchCase=\"'inactive'\" class=\"inactive-status\">\n          <h4>‚è∏Ô∏è Account Inactive</h4>\n          <p>Your account is temporarily disabled. Contact support to reactivate.</p>\n          <button class=\"btn-warning\">Contact Support</button>\n        </div>\n        \n        <div *ngSwitchCase=\"'pending'\" class=\"pending-status\">\n          <h4>‚è≥ Account Pending</h4>\n          <p>Your account is awaiting verification. Check your email.</p>\n          <button class=\"btn-primary\">Resend Verification</button>\n        </div>\n        \n        <div *ngSwitchDefault class=\"unknown-status\">\n          <h4>‚ùì Unknown Status</h4>\n          <p>Account status unclear. Please refresh or contact support.</p>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Settings View -->\n    <div *ngSwitchCase=\"'settings'\" class=\"settings-view\">\n      <h2>‚öôÔ∏è Settings</h2>\n      \n      <!-- Content Type Selector -->\n      <div class=\"setting-group\">\n        <h4>Content Type Preferences</h4>\n        <div class=\"type-buttons\">\n          <button \n            *ngFor=\"let type of ['article', 'video', 'podcast', 'image']\"\n            (click)=\"switchContentType(type)\"\n            [class.active]=\"contentType === type\">\n            {{ type | titlecase }}\n          </button>\n        </div>\n        \n        <!-- Content type specific settings -->\n        <div [ngSwitch]=\"contentType\" class=\"content-settings\">\n          <div *ngSwitchCase=\"'article'\" class=\"article-settings\">\n            <h5>üìÑ Article Settings</h5>\n            <label><input type=\"checkbox\"> Auto-bookmark articles</label>\n            <label><input type=\"checkbox\" checked> Show reading time</label>\n            <label><input type=\"checkbox\"> Dark mode for reading</label>\n          </div>\n          \n          <div *ngSwitchCase=\"'video'\" class=\"video-settings\">\n            <h5>üé• Video Settings</h5>\n            <label><input type=\"checkbox\" checked> Auto-play videos</label>\n            <label><input type=\"checkbox\"> HD quality by default</label>\n            <label><input type=\"checkbox\"> Show captions</label>\n          </div>\n          \n          <div *ngSwitchCase=\"'podcast'\" class=\"podcast-settings\">\n            <h5>üéß Podcast Settings</h5>\n            <label><input type=\"checkbox\"> Auto-download episodes</label>\n            <label><input type=\"checkbox\" checked> Skip intro/outro</label>\n            <label><input type=\"checkbox\"> Notification for new episodes</label>\n          </div>\n          \n          <div *ngSwitchCase=\"'image'\" class=\"image-settings\">\n            <h5>üñºÔ∏è Image Settings</h5>\n            <label><input type=\"checkbox\" checked> Load high-resolution</label>\n            <label><input type=\"checkbox\"> Auto-slideshow</label>\n            <label><input type=\"checkbox\"> Show metadata</label>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Payment Method Settings -->\n      <div class=\"setting-group\">\n        <h4>Payment Method</h4>\n        <select (change)=\"switchPayment($event.target.value)\" [value]=\"paymentMethod\">\n          <option value=\"credit\">Credit Card</option>\n          <option value=\"debit\">Debit Card</option>\n          <option value=\"paypal\">PayPal</option>\n          <option value=\"crypto\">Cryptocurrency</option>\n        </select>\n        \n        <div [ngSwitch]=\"paymentMethod\" class=\"payment-info\">\n          <div *ngSwitchCase=\"'credit'\" class=\"credit-info\">\n            <h5>üí≥ Credit Card</h5>\n            <p>Secure payments with instant processing</p>\n            <input type=\"text\" placeholder=\"Card Number\">\n            <input type=\"text\" placeholder=\"CVV\">\n          </div>\n          \n          <div *ngSwitchCase=\"'debit'\" class=\"debit-info\">\n            <h5>üí≥ Debit Card</h5>\n            <p>Direct bank account payments</p>\n            <input type=\"text\" placeholder=\"Card Number\">\n            <input type=\"text\" placeholder=\"PIN\">\n          </div>\n          \n          <div *ngSwitchCase=\"'paypal'\" class=\"paypal-info\">\n            <h5>üîµ PayPal</h5>\n            <p>Pay with your PayPal account</p>\n            <button class=\"btn-paypal\">Connect PayPal</button>\n          </div>\n          \n          <div *ngSwitchCase=\"'crypto'\" class=\"crypto-info\">\n            <h5>‚Çø Cryptocurrency</h5>\n            <p>Pay with Bitcoin, Ethereum, or other cryptocurrencies</p>\n            <select>\n              <option>Bitcoin (BTC)</option>\n              <option>Ethereum (ETH)</option>\n              <option>Litecoin (LTC)</option>\n            </select>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Help View -->\n    <div *ngSwitchCase=\"'help'\" class=\"help-view\">\n      <h2>‚ùì Help & Support</h2>\n      \n      <!-- Notification Examples -->\n      <div class=\"notifications-demo\">\n        <h4>Notification Types</h4>\n        \n        <div *ngFor=\"let notification of notifications\" \n             class=\"notification-item\">\n          \n          <div [ngSwitch]=\"notification.type\" class=\"notification-content\">\n            <div *ngSwitchCase=\"'info'\" class=\"info-notification\">\n              <span class=\"icon\">‚ÑπÔ∏è</span>\n              <div class=\"content\">\n                <h5>Information</h5>\n                <p>{{ notification.message }}</p>\n              </div>\n            </div>\n            \n            <div *ngSwitchCase=\"'warning'\" class=\"warning-notification\">\n              <span class=\"icon\">‚ö†Ô∏è</span>\n              <div class=\"content\">\n                <h5>Warning</h5>\n                <p>{{ notification.message }}</p>\n              </div>\n            </div>\n            \n            <div *ngSwitchCase=\"'error'\" class=\"error-notification\">\n              <span class=\"icon\">‚ùå</span>\n              <div class=\"content\">\n                <h5>Error</h5>\n                <p>{{ notification.message }}</p>\n              </div>\n            </div>\n            \n            <div *ngSwitchCase=\"'success'\" class=\"success-notification\">\n              <span class=\"icon\">‚úÖ</span>\n              <div class=\"content\">\n                <h5>Success</h5>\n                <p>{{ notification.message }}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Default case (this should not normally be reached) -->\n    <div *ngSwitchDefault class=\"unknown-view\">\n      <h2>‚ùì Unknown View</h2>\n      <p>The requested view \"{{ currentView }}\" is not available.</p>\n      <button (click)=\"switchView('dashboard')\" class=\"btn-primary\">\n        Go to Dashboard\n      </button>\n    </div>\n  </div>\n</div>",
      "language": "typescript",
      "isEditable": true,
      "explanation": "*ngSwitch evaluates an expression and displays the matching *ngSwitchCase template. Use *ngSwitchDefault for fallback content. It's ideal for mutually exclusive content like tabs, modes, or states.",
      "expectedOutput": "Multi-view application with role-based content, dynamic settings, and contextual information"
    }
  ],
  "order": 3,
  "tags": ["directives", "ngIf", "ngFor", "ngClass", "ngStyle", "ngSwitch"],
  "difficulty": "intermediate",
  "estimatedTime": "45 min",
  "exercises": [
    {
      "id": "dashboard-with-directives",
      "title": "Build a Comprehensive Dashboard",
      "description": "Create a dashboard application that uses all the directive types covered:",
      "tasks": [
        "Create a user dashboard with different views (*ngSwitch)",
        "Show/hide sections based on user permissions (*ngIf)",
        "Display lists of data with filtering (*ngFor with trackBy)",
        "Apply dynamic styling based on status (ngClass, ngStyle)",
        "Include responsive design elements",
        "Add loading states and error handling",
        "Implement user role-based content display"
      ],
      "expectedResult": "A fully interactive dashboard demonstrating mastery of Angular directives with real-world functionality"
    }
  ]
}