{
  "id": "templates-data-binding",
  "moduleId": "fundamentals",
  "title": "Templates & Data Binding",
  "content": "<h2>Angular Templates and Data Binding</h2><p>Templates are the foundation of Angular components, defining how data is displayed and how users interact with your application. Angular's powerful data binding system creates a bridge between your component's TypeScript code and the HTML template.</p><h3>Types of Data Binding</h3><p>Angular provides four main types of data binding:</p><ul><li><strong>Interpolation:</strong> {{ }} - Displays component data in the template</li><li><strong>Property Binding:</strong> [property] - Sets element properties from component data</li><li><strong>Event Binding:</strong> (event) - Responds to user events like clicks and key presses</li><li><strong>Two-way Binding:</strong> [(ngModel)] - Combines property and event binding for form inputs</li></ul><h3>Template Syntax Overview</h3><p>Angular templates use HTML with additional Angular-specific markup:</p><ul><li><strong>Binding expressions:</strong> Evaluate TypeScript expressions in the component context</li><li><strong>Template reference variables:</strong> Create local variables to reference elements</li><li><strong>Template statements:</strong> Respond to events with method calls or property assignments</li><li><strong>Pipes:</strong> Transform displayed data (formatting, filtering, etc.)</li></ul><h3>Safe Navigation Operator</h3><p>The safe navigation operator (?.) helps prevent errors when accessing properties of potentially null or undefined objects. This is especially useful when working with asynchronous data.</p><h3>Template Reference Variables</h3><p>Template reference variables (#var) create a reference to a DOM element or Angular component that can be used elsewhere in the template.</p><h3>Input and Output Properties</h3><p>Data flows into components through Input properties and out through Output events, enabling parent-child component communication.</p><h3>Best Practices</h3><ul><li>Keep template expressions simple and fast</li><li>Use safe navigation operator for nullable properties</li><li>Prefer property binding over interpolation for non-string values</li><li>Use trackBy functions with *ngFor for performance</li><li>Avoid complex logic in templates - move it to the component</li></ul>",
  "codeExamples": [
    {
      "id": "interpolation-basics",
      "title": "Interpolation - Displaying Data",
      "description": "Use interpolation to display component properties in your template.",
      "code": "// Component\nexport class UserProfileComponent {\n  userName = 'Alice Johnson';\n  userAge = 28;\n  userEmail = 'alice@example.com';\n  isOnline = true;\n  joinDate = new Date('2023-01-15');\n  hobbies = ['Reading', 'Photography', 'Hiking'];\n  \n  getFullProfile() {\n    return `${this.userName} (${this.userAge} years old)`;\n  }\n  \n  getStatus() {\n    return this.isOnline ? 'Online' : 'Offline';\n  }\n}\n\n<!-- Template -->\n<div class=\"user-profile\">\n  <h2>{{ userName }}</h2>\n  <p>Age: {{ userAge }}</p>\n  <p>Email: {{ userEmail }}</p>\n  <p>Status: {{ getStatus() }}</p>\n  <p>Full Profile: {{ getFullProfile() }}</p>\n  <p>Member since: {{ joinDate | date:'fullDate' }}</p>\n  <p>Hobbies: {{ hobbies.join(', ') }}</p>\n  \n  <!-- Mathematical expressions -->\n  <p>Birth Year: {{ 2024 - userAge }}</p>\n  \n  <!-- String concatenation -->\n  <p>Welcome, {{ 'Mr./Ms. ' + userName }}!</p>\n  \n  <!-- Conditional expressions -->\n  <p class=\"status\">{{ isOnline ? 'ðŸŸ¢ Available' : 'ðŸ”´ Away' }}</p>\n</div>",
      "language": "typescript",
      "isEditable": true,
      "explanation": "Interpolation evaluates TypeScript expressions and converts the result to a string. You can use properties, method calls, and simple expressions within the double curly braces.",
      "expectedOutput": "User profile information displayed with dynamic data from the component"
    },
    {
      "id": "property-binding",
      "title": "Property Binding - Setting Element Properties",
      "description": "Use property binding to dynamically set HTML element properties and attributes.",
      "code": "// Component\nexport class ImageGalleryComponent {\n  images = [\n    { id: 1, src: 'assets/image1.jpg', alt: 'Mountain landscape', title: 'Beautiful Mountains' },\n    { id: 2, src: 'assets/image2.jpg', alt: 'Ocean view', title: 'Peaceful Ocean' },\n    { id: 3, src: 'assets/image3.jpg', alt: 'City skyline', title: 'Urban Life' }\n  ];\n  \n  selectedImageId = 1;\n  isGalleryEnabled = true;\n  imageSize = 200;\n  borderRadius = 10;\n  currentTheme = 'dark';\n  \n  getImageById(id: number) {\n    return this.images.find(img => img.id === id);\n  }\n  \n  isSelected(imageId: number) {\n    return this.selectedImageId === imageId;\n  }\n}\n\n<!-- Template -->\n<div class=\"image-gallery\" [class]=\"currentTheme\">\n  <div \n    *ngFor=\"let image of images\" \n    class=\"image-container\"\n    [class.selected]=\"isSelected(image.id)\"\n    [class.disabled]=\"!isGalleryEnabled\">\n    \n    <img \n      [src]=\"image.src\"\n      [alt]=\"image.alt\"\n      [title]=\"image.title\"\n      [width]=\"imageSize\"\n      [height]=\"imageSize\"\n      [style.border-radius.px]=\"borderRadius\"\n      [style.opacity]=\"isGalleryEnabled ? 1 : 0.5\"\n      [disabled]=\"!isGalleryEnabled\">\n    \n    <p [innerHTML]=\"image.title\"></p>\n  </div>\n  \n  <!-- Attribute binding -->\n  <button \n    [attr.aria-label]=\"'Select image ' + selectedImageId\"\n    [attr.data-image-id]=\"selectedImageId\">\n    Current Selection\n  </button>\n  \n  <!-- Boolean properties -->\n  <input \n    type=\"checkbox\" \n    [checked]=\"isGalleryEnabled\"\n    [disabled]=\"false\">\n  Enable Gallery\n</div>",
      "language": "typescript",
      "isEditable": true,
      "explanation": "Property binding uses square brackets to set element properties, CSS classes, styles, and attributes dynamically. Use [attr.name] for HTML attributes and [style.property] for CSS styles.",
      "expectedOutput": "Dynamic image gallery with conditional styling, attributes, and properties"
    },
    {
      "id": "event-binding",
      "title": "Event Binding - Handling User Interactions",
      "description": "Use event binding to respond to user actions like clicks, key presses, and form submissions.",
      "code": "// Component\nexport class InteractiveFormComponent {\n  userName = '';\n  email = '';\n  message = '';\n  isSubmitting = false;\n  submitCount = 0;\n  lastKeyPressed = '';\n  mousePosition = { x: 0, y: 0 };\n  \n  onSubmit() {\n    if (this.userName && this.email) {\n      this.isSubmitting = true;\n      this.submitCount++;\n      \n      // Simulate API call\n      setTimeout(() => {\n        this.isSubmitting = false;\n        alert(`Form submitted! Count: ${this.submitCount}`);\n        this.resetForm();\n      }, 2000);\n    } else {\n      alert('Please fill in all required fields');\n    }\n  }\n  \n  onInputChange(event: Event, field: string) {\n    const target = event.target as HTMLInputElement;\n    const value = target.value;\n    \n    switch(field) {\n      case 'name':\n        this.userName = value;\n        break;\n      case 'email':\n        this.email = value;\n        break;\n      case 'message':\n        this.message = value;\n        break;\n    }\n    \n    console.log(`${field} changed to:`, value);\n  }\n  \n  onKeyPress(event: KeyboardEvent) {\n    this.lastKeyPressed = event.key;\n    \n    if (event.key === 'Enter' && event.ctrlKey) {\n      this.onSubmit();\n    }\n  }\n  \n  onMouseMove(event: MouseEvent) {\n    this.mousePosition = {\n      x: event.clientX,\n      y: event.clientY\n    };\n  }\n  \n  onFocus(fieldName: string) {\n    console.log(`Focused on ${fieldName}`);\n  }\n  \n  onBlur(fieldName: string) {\n    console.log(`Left ${fieldName}`);\n  }\n  \n  resetForm() {\n    this.userName = '';\n    this.email = '';\n    this.message = '';\n  }\n}\n\n<!-- Template -->\n<div class=\"interactive-form\" (mousemove)=\"onMouseMove($event)\">\n  <form (submit)=\"onSubmit(); $event.preventDefault()\">\n    <div class=\"form-group\">\n      <label for=\"name\">Name:</label>\n      <input \n        id=\"name\"\n        type=\"text\" \n        [value]=\"userName\"\n        (input)=\"onInputChange($event, 'name')\"\n        (focus)=\"onFocus('name')\"\n        (blur)=\"onBlur('name')\"\n        (keypress)=\"onKeyPress($event)\"\n        placeholder=\"Enter your name\"\n        required>\n    </div>\n    \n    <div class=\"form-group\">\n      <label for=\"email\">Email:</label>\n      <input \n        id=\"email\"\n        type=\"email\" \n        [value]=\"email\"\n        (input)=\"onInputChange($event, 'email')\"\n        (focus)=\"onFocus('email')\"\n        (blur)=\"onBlur('email')\"\n        placeholder=\"Enter your email\"\n        required>\n    </div>\n    \n    <div class=\"form-group\">\n      <label for=\"message\">Message:</label>\n      <textarea \n        id=\"message\"\n        [value]=\"message\"\n        (input)=\"onInputChange($event, 'message')\"\n        (focus)=\"onFocus('message')\"\n        (blur)=\"onBlur('message')\"\n        placeholder=\"Enter your message\"\n        rows=\"4\">\n      </textarea>\n    </div>\n    \n    <button \n      type=\"submit\"\n      [disabled]=\"isSubmitting || !userName || !email\"\n      (click)=\"onSubmit()\">\n      {{ isSubmitting ? 'Submitting...' : 'Submit Form' }}\n    </button>\n    \n    <button \n      type=\"button\"\n      (click)=\"resetForm()\"\n      [disabled]=\"isSubmitting\">\n      Reset\n    </button>\n  </form>\n  \n  <div class=\"info-panel\">\n    <p>Form submitted {{ submitCount }} times</p>\n    <p>Last key pressed: {{ lastKeyPressed || 'None' }}</p>\n    <p>Mouse position: ({{ mousePosition.x }}, {{ mousePosition.y }})</p>\n    <p>Ctrl+Enter to submit quickly!</p>\n  </div>\n</div>",
      "language": "typescript",
      "isEditable": true,
      "explanation": "Event binding uses parentheses to listen for DOM events. The $event object provides access to the original DOM event, and you can call component methods or update properties in response to user actions.",
      "expectedOutput": "Interactive form with real-time event handling and user feedback"
    },
    {
      "id": "two-way-binding",
      "title": "Two-Way Data Binding with ngModel",
      "description": "Combine property and event binding for seamless form input synchronization.",
      "code": "// Component (requires FormsModule import)\nexport class SettingsComponent {\n  // User preferences\n  profile = {\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n    bio: 'Software developer passionate about Angular',\n    age: 30,\n    country: 'USA'\n  };\n  \n  // Settings\n  settings = {\n    notifications: true,\n    darkMode: false,\n    language: 'en',\n    fontSize: 16,\n    autoSave: true\n  };\n  \n  // Options\n  countries = ['USA', 'Canada', 'UK', 'Germany', 'France', 'Japan'];\n  languages = [\n    { code: 'en', name: 'English' },\n    { code: 'es', name: 'Spanish' },\n    { code: 'fr', name: 'French' },\n    { code: 'de', name: 'German' }\n  ];\n  \n  onSave() {\n    console.log('Profile:', this.profile);\n    console.log('Settings:', this.settings);\n    alert('Settings saved successfully!');\n  }\n  \n  onReset() {\n    this.profile = {\n      name: '',\n      email: '',\n      bio: '',\n      age: 18,\n      country: 'USA'\n    };\n    \n    this.settings = {\n      notifications: true,\n      darkMode: false,\n      language: 'en',\n      fontSize: 16,\n      autoSave: true\n    };\n  }\n  \n  getPreviewStyle() {\n    return {\n      'font-size': this.settings.fontSize + 'px',\n      'background-color': this.settings.darkMode ? '#333' : '#fff',\n      'color': this.settings.darkMode ? '#fff' : '#333'\n    };\n  }\n}\n\n<!-- Template -->\n<div class=\"settings-panel\">\n  <h2>User Settings</h2>\n  \n  <!-- Profile Section -->\n  <div class=\"section\">\n    <h3>Profile Information</h3>\n    \n    <div class=\"form-group\">\n      <label for=\"name\">Full Name:</label>\n      <input \n        id=\"name\"\n        type=\"text\" \n        [(ngModel)]=\"profile.name\"\n        placeholder=\"Enter your full name\">\n    </div>\n    \n    <div class=\"form-group\">\n      <label for=\"email\">Email:</label>\n      <input \n        id=\"email\"\n        type=\"email\" \n        [(ngModel)]=\"profile.email\"\n        placeholder=\"Enter your email\">\n    </div>\n    \n    <div class=\"form-group\">\n      <label for=\"bio\">Bio:</label>\n      <textarea \n        id=\"bio\"\n        [(ngModel)]=\"profile.bio\"\n        placeholder=\"Tell us about yourself\"\n        rows=\"3\">\n      </textarea>\n    </div>\n    \n    <div class=\"form-group\">\n      <label for=\"age\">Age:</label>\n      <input \n        id=\"age\"\n        type=\"number\" \n        [(ngModel)]=\"profile.age\"\n        min=\"18\" \n        max=\"120\">\n    </div>\n    \n    <div class=\"form-group\">\n      <label for=\"country\">Country:</label>\n      <select id=\"country\" [(ngModel)]=\"profile.country\">\n        <option *ngFor=\"let country of countries\" [value]=\"country\">\n          {{ country }}\n        </option>\n      </select>\n    </div>\n  </div>\n  \n  <!-- Settings Section -->\n  <div class=\"section\">\n    <h3>Application Settings</h3>\n    \n    <div class=\"form-group\">\n      <label>\n        <input \n          type=\"checkbox\" \n          [(ngModel)]=\"settings.notifications\">\n        Enable Notifications\n      </label>\n    </div>\n    \n    <div class=\"form-group\">\n      <label>\n        <input \n          type=\"checkbox\" \n          [(ngModel)]=\"settings.darkMode\">\n        Dark Mode\n      </label>\n    </div>\n    \n    <div class=\"form-group\">\n      <label>\n        <input \n          type=\"checkbox\" \n          [(ngModel)]=\"settings.autoSave\">\n        Auto Save\n      </label>\n    </div>\n    \n    <div class=\"form-group\">\n      <label for=\"language\">Language:</label>\n      <select id=\"language\" [(ngModel)]=\"settings.language\">\n        <option *ngFor=\"let lang of languages\" [value]=\"lang.code\">\n          {{ lang.name }}\n        </option>\n      </select>\n    </div>\n    \n    <div class=\"form-group\">\n      <label for=\"fontSize\">Font Size: {{ settings.fontSize }}px</label>\n      <input \n        id=\"fontSize\"\n        type=\"range\" \n        [(ngModel)]=\"settings.fontSize\"\n        min=\"12\" \n        max=\"24\" \n        step=\"1\">\n    </div>\n  </div>\n  \n  <!-- Preview Section -->\n  <div class=\"section\">\n    <h3>Preview</h3>\n    <div class=\"preview\" [ngStyle]=\"getPreviewStyle()\">\n      <h4>Hello, {{ profile.name || 'User' }}!</h4>\n      <p>{{ profile.bio || 'No bio available' }}</p>\n      <p>Theme: {{ settings.darkMode ? 'Dark' : 'Light' }}</p>\n      <p>Language: {{ (languages.find(l => l.code === settings.language))?.name }}</p>\n    </div>\n  </div>\n  \n  <!-- Actions -->\n  <div class=\"actions\">\n    <button (click)=\"onSave()\" class=\"btn-primary\">\n      Save Settings\n    </button>\n    <button (click)=\"onReset()\" class=\"btn-secondary\">\n      Reset to Defaults\n    </button>\n  </div>\n  \n  <!-- Debug Info -->\n  <details class=\"debug-info\">\n    <summary>Debug Information</summary>\n    <pre>{{ profile | json }}</pre>\n    <pre>{{ settings | json }}</pre>\n  </details>\n</div>",
      "language": "typescript",
      "isEditable": true,
      "explanation": "Two-way binding with [(ngModel)] automatically synchronizes form inputs with component properties. Changes in the input update the property, and property changes update the input display.",
      "expectedOutput": "Dynamic settings form with real-time preview and two-way data synchronization"
    },
    {
      "id": "template-reference-variables",
      "title": "Template Reference Variables and Safe Navigation",
      "description": "Use template reference variables to access DOM elements and handle nullable data safely.",
      "code": "// Component\nexport class AdvancedTemplateComponent {\n  user: any = null;\n  searchResults: any[] = [];\n  isLoading = false;\n  errorMessage = '';\n  \n  loadUser(userId: string) {\n    if (!userId.trim()) return;\n    \n    this.isLoading = true;\n    this.errorMessage = '';\n    this.user = null;\n    \n    // Simulate API call\n    setTimeout(() => {\n      if (userId === '1') {\n        this.user = {\n          id: 1,\n          name: 'Alice Johnson',\n          email: 'alice@example.com',\n          profile: {\n            avatar: 'assets/alice.jpg',\n            bio: 'Frontend Developer',\n            preferences: {\n              theme: 'dark',\n              notifications: true\n            }\n          },\n          posts: [\n            { id: 1, title: 'Angular Tips', likes: 25 },\n            { id: 2, title: 'TypeScript Tricks', likes: 18 }\n          ]\n        };\n      } else {\n        this.errorMessage = 'User not found';\n      }\n      this.isLoading = false;\n    }, 1500);\n  }\n  \n  onSearch(query: string) {\n    this.searchResults = [\n      { id: 1, title: 'Angular Components', type: 'article' },\n      { id: 2, title: 'Data Binding Guide', type: 'tutorial' }\n    ].filter(item => \n      item.title.toLowerCase().includes(query.toLowerCase())\n    );\n  }\n  \n  focusInput(inputElement: HTMLInputElement) {\n    inputElement.focus();\n    inputElement.select();\n  }\n  \n  clearInput(inputElement: HTMLInputElement) {\n    inputElement.value = '';\n    this.searchResults = [];\n  }\n}\n\n<!-- Template -->\n<div class=\"advanced-template\">\n  <!-- User Search Section -->\n  <div class=\"search-section\">\n    <h3>User Lookup</h3>\n    \n    <div class=\"input-group\">\n      <input \n        #userIdInput\n        type=\"text\" \n        placeholder=\"Enter user ID (try '1')\"\n        (keyup.enter)=\"loadUser(userIdInput.value)\"\n        [disabled]=\"isLoading\">\n      \n      <button \n        (click)=\"loadUser(userIdInput.value)\"\n        [disabled]=\"isLoading || !userIdInput.value.trim()\">\n        {{ isLoading ? 'Loading...' : 'Search' }}\n      </button>\n      \n      <button \n        (click)=\"focusInput(userIdInput)\"\n        [disabled]=\"isLoading\">\n        Focus\n      </button>\n    </div>\n    \n    <!-- Loading State -->\n    <div *ngIf=\"isLoading\" class=\"loading\">\n      <p>Searching for user...</p>\n    </div>\n    \n    <!-- Error State -->\n    <div *ngIf=\"errorMessage\" class=\"error\">\n      <p>{{ errorMessage }}</p>\n    </div>\n    \n    <!-- User Details with Safe Navigation -->\n    <div *ngIf=\"user\" class=\"user-details\">\n      <h4>{{ user?.name }}</h4>\n      <p>Email: {{ user?.email }}</p>\n      \n      <!-- Nested safe navigation -->\n      <p>Bio: {{ user?.profile?.bio || 'No bio available' }}</p>\n      <p>Theme: {{ user?.profile?.preferences?.theme || 'default' }}</p>\n      \n      <!-- Safe navigation with arrays -->\n      <div *ngIf=\"user?.posts?.length > 0\">\n        <h5>Recent Posts ({{ user?.posts?.length }}):</h5>\n        <ul>\n          <li *ngFor=\"let post of user?.posts\">\n            {{ post?.title }} ({{ post?.likes }} likes)\n          </li>\n        </ul>\n      </div>\n      \n      <!-- Avatar with fallback -->\n      <img \n        [src]=\"user?.profile?.avatar || 'assets/default-avatar.png'\"\n        [alt]=\"user?.name || 'User avatar'\"\n        class=\"avatar\">\n    </div>\n  </div>\n  \n  <!-- Content Search Section -->\n  <div class=\"content-search\">\n    <h3>Content Search</h3>\n    \n    <div class=\"search-box\">\n      <input \n        #searchInput\n        type=\"text\" \n        placeholder=\"Search content...\"\n        (input)=\"onSearch(searchInput.value)\">\n      \n      <button (click)=\"clearInput(searchInput)\">\n        Clear\n      </button>\n    </div>\n    \n    <!-- Search Results -->\n    <div class=\"search-results\">\n      <p *ngIf=\"searchInput.value && searchResults.length === 0\">\n        No results found for \"{{ searchInput.value }}\"\n      </p>\n      \n      <div *ngFor=\"let result of searchResults\" class=\"result-item\">\n        <h5>{{ result?.title }}</h5>\n        <span class=\"type\">{{ result?.type }}</span>\n      </div>\n    </div>\n  </div>\n  \n  <!-- Form with Template Reference Variables -->\n  <div class=\"contact-form\">\n    <h3>Contact Form</h3>\n    \n    <form #contactForm=\"ngForm\" (submit)=\"$event.preventDefault()\">\n      <input \n        #nameInput=\"ngModel\"\n        name=\"name\"\n        [(ngModel)]=\"user?.name\"\n        required\n        placeholder=\"Name\">\n      \n      <div *ngIf=\"nameInput.invalid && nameInput.touched\" class=\"error\">\n        Name is required\n      </div>\n      \n      <input \n        #emailInput=\"ngModel\"\n        name=\"email\"\n        type=\"email\"\n        [(ngModel)]=\"user?.email\"\n        required\n        placeholder=\"Email\">\n      \n      <div *ngIf=\"emailInput.invalid && emailInput.touched\" class=\"error\">\n        Please enter a valid email\n      </div>\n      \n      <button \n        type=\"submit\"\n        [disabled]=\"contactForm.invalid\">\n        Submit (Form Valid: {{ contactForm.valid }})\n      </button>\n    </form>\n  </div>\n  \n  <!-- Template Variable Information -->\n  <div class=\"template-info\">\n    <h4>Template Variable Info:</h4>\n    <p>User ID Input Value: \"{{ userIdInput?.value }}\"</p>\n    <p>Search Input Value: \"{{ searchInput?.value }}\"</p>\n    <p>Form Valid: {{ contactForm?.valid }}</p>\n    <p>Name Input Touched: {{ nameInput?.touched }}</p>\n    <p>Email Input Valid: {{ emailInput?.valid }}</p>\n  </div>\n</div>",
      "language": "typescript",
      "isEditable": true,
      "explanation": "Template reference variables (#var) create references to DOM elements, components, or directives. The safe navigation operator (?.) prevents errors when accessing properties of potentially null/undefined objects.",
      "expectedOutput": "Advanced template with safe data access, form validation, and DOM element references"
    }
  ],
  "order": 2,
  "tags": ["templates", "data-binding", "interpolation", "events", "ngModel"],
  "difficulty": "beginner",
  "estimatedTime": "60 min",
  "exercises": [
    {
      "id": "todo-app-binding",
      "title": "Build a Todo App with Data Binding",
      "description": "Create a todo application that demonstrates all types of data binding:",
      "tasks": [
        "Create a todo interface with properties: id, text, completed, priority",
        "Use interpolation to display todo count and completion statistics",
        "Implement property binding for conditional styling (completed items)",
        "Add event binding for add, toggle, and delete operations",
        "Use two-way binding for editing todo text inline",
        "Include template reference variables for form inputs",
        "Add safe navigation for optional properties"
      ],
      "expectedResult": "A fully functional todo application showcasing all Angular data binding techniques"
    }
  ]
}