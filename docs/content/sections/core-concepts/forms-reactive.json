{
  "id": "forms-reactive",
  "moduleId": "core-concepts",
  "title": "Reactive Forms",
  "order": 3,
  "content": "Reactive forms provide a model-driven approach to handling form inputs whose values change over time. Angular reactive forms facilitate a reactive style of programming that favors explicit management of the data flowing between a non-UI data model and a UI-oriented form model that retains the states and values of the HTML controls on screen.\n\nReactive forms use an explicit and immutable approach to managing the state of a form at a given point in time. Each change to the form state returns a new state, which maintains the integrity of the model between changes.",
  "estimatedTime": "40 minutes",
  "objectives": [
    "Understand reactive forms vs template-driven forms",
    "Learn FormControl, FormGroup, and FormArray",
    "Master form validation and error handling",
    "Implement dynamic forms and custom validators"
  ],
  "codeExamples": [
    {
      "title": "Basic Reactive Form",
      "language": "typescript",
      "code": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\n@Component({\n  selector: 'app-user-form',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, MatInputModule, MatButtonModule, MatFormFieldModule],\n  template: `\n    <form [formGroup]=\"userForm\" (ngSubmit)=\"onSubmit()\" class=\"user-form\">\n      <h3>User Registration</h3>\n      \n      <!-- Name Field -->\n      <mat-form-field>\n        <mat-label>Full Name</mat-label>\n        <input matInput formControlName=\"name\" placeholder=\"Enter your full name\">\n        <mat-error *ngIf=\"userForm.get('name')?.hasError('required')\">\n          Name is required\n        </mat-error>\n        <mat-error *ngIf=\"userForm.get('name')?.hasError('minlength')\">\n          Name must be at least 2 characters\n        </mat-error>\n      </mat-form-field>\n      \n      <!-- Email Field -->\n      <mat-form-field>\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" type=\"email\" placeholder=\"Enter your email\">\n        <mat-error *ngIf=\"userForm.get('email')?.hasError('required')\">\n          Email is required\n        </mat-error>\n        <mat-error *ngIf=\"userForm.get('email')?.hasError('email')\">\n          Please enter a valid email\n        </mat-error>\n      </mat-form-field>\n      \n      <!-- Phone Field -->\n      <mat-form-field>\n        <mat-label>Phone Number</mat-label>\n        <input matInput formControlName=\"phone\" placeholder=\"(555) 123-4567\">\n        <mat-error *ngIf=\"userForm.get('phone')?.hasError('required')\">\n          Phone number is required\n        </mat-error>\n        <mat-error *ngIf=\"userForm.get('phone')?.hasError('pattern')\">\n          Please enter a valid phone number\n        </mat-error>\n      </mat-form-field>\n      \n      <!-- Age Field -->\n      <mat-form-field>\n        <mat-label>Age</mat-label>\n        <input matInput formControlName=\"age\" type=\"number\" placeholder=\"Enter your age\">\n        <mat-error *ngIf=\"userForm.get('age')?.hasError('required')\">\n          Age is required\n        </mat-error>\n        <mat-error *ngIf=\"userForm.get('age')?.hasError('min')\">\n          Age must be at least 18\n        </mat-error>\n        <mat-error *ngIf=\"userForm.get('age')?.hasError('max')\">\n          Age must be less than 120\n        </mat-error>\n      </mat-form-field>\n      \n      <!-- Submit Button -->\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"userForm.invalid\">\n        Register\n      </button>\n      \n      <!-- Form Debug Info -->\n      <div class=\"form-debug\" *ngIf=\"showDebug\">\n        <h4>Form Debug Info:</h4>\n        <p>Form Valid: {{ userForm.valid }}</p>\n        <p>Form Value: {{ userForm.value | json }}</p>\n        <p>Form Status: {{ userForm.status }}</p>\n      </div>\n      \n      <button mat-button type=\"button\" (click)=\"toggleDebug()\">\n        {{ showDebug ? 'Hide' : 'Show' }} Debug Info\n      </button>\n    </form>\n  `,\n  styles: [`\n    .user-form {\n      max-width: 400px;\n      margin: 20px auto;\n      padding: 20px;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n    }\n    mat-form-field {\n      width: 100%;\n      margin-bottom: 15px;\n    }\n    button[mat-raised-button] {\n      width: 100%;\n      margin-top: 10px;\n    }\n    .form-debug {\n      margin-top: 20px;\n      padding: 15px;\n      background: #f8f9fa;\n      border-radius: 4px;\n      font-family: monospace;\n      font-size: 0.9em;\n    }\n  `]\n})\nexport class UserFormComponent implements OnInit {\n  userForm!: FormGroup;\n  showDebug = false;\n\n  ngOnInit(): void {\n    this.initializeForm();\n  }\n\n  private initializeForm(): void {\n    this.userForm = new FormGroup({\n      name: new FormControl('', [\n        Validators.required,\n        Validators.minLength(2)\n      ]),\n      email: new FormControl('', [\n        Validators.required,\n        Validators.email\n      ]),\n      phone: new FormControl('', [\n        Validators.required,\n        Validators.pattern(/^\\(\\d{3}\\)\\s\\d{3}-\\d{4}$/)\n      ]),\n      age: new FormControl('', [\n        Validators.required,\n        Validators.min(18),\n        Validators.max(120)\n      ])\n    });\n    \n    // Subscribe to form value changes\n    this.userForm.valueChanges.subscribe(value => {\n      console.log('Form value changed:', value);\n    });\n    \n    // Subscribe to form status changes\n    this.userForm.statusChanges.subscribe(status => {\n      console.log('Form status changed:', status);\n    });\n  }\n\n  onSubmit(): void {\n    if (this.userForm.valid) {\n      console.log('Form submitted:', this.userForm.value);\n      // Process form data here\n      this.resetForm();\n    } else {\n      console.log('Form is invalid');\n      this.markAllFieldsAsTouched();\n    }\n  }\n\n  private markAllFieldsAsTouched(): void {\n    Object.keys(this.userForm.controls).forEach(key => {\n      this.userForm.get(key)?.markAsTouched();\n    });\n  }\n\n  private resetForm(): void {\n    this.userForm.reset();\n  }\n\n  toggleDebug(): void {\n    this.showDebug = !this.showDebug;\n  }\n}",
      "explanation": "This example demonstrates a basic reactive form with validation, error handling, and form state management."
    },
    {
      "title": "Advanced Form with FormArray and Custom Validators",
      "language": "typescript",
      "code": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n// Custom validator functions\nexport function emailDomainValidator(allowedDomains: string[]) {\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (!control.value) return null;\n    \n    const email = control.value;\n    const domain = email.substring(email.lastIndexOf('@') + 1);\n    \n    if (allowedDomains.includes(domain)) {\n      return null;\n    }\n    \n    return { emailDomain: { actualDomain: domain, allowedDomains } };\n  };\n}\n\nexport function passwordStrengthValidator(control: AbstractControl): ValidationErrors | null {\n  if (!control.value) return null;\n  \n  const password = control.value;\n  const hasUpperCase = /[A-Z]/.test(password);\n  const hasLowerCase = /[a-z]/.test(password);\n  const hasNumeric = /[0-9]/.test(password);\n  const hasSpecial = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n  \n  const errors: any = {};\n  \n  if (!hasUpperCase) errors.noUpperCase = true;\n  if (!hasLowerCase) errors.noLowerCase = true;\n  if (!hasNumeric) errors.noNumeric = true;\n  if (!hasSpecial) errors.noSpecial = true;\n  if (password.length < 8) errors.minLength = true;\n  \n  return Object.keys(errors).length ? { passwordStrength: errors } : null;\n}\n\n@Component({\n  selector: 'app-advanced-form',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  template: `\n    <form [formGroup]=\"advancedForm\" (ngSubmit)=\"onSubmit()\" class=\"advanced-form\">\n      <h3>Project Team Registration</h3>\n      \n      <!-- Project Info -->\n      <div class=\"form-section\">\n        <h4>Project Information</h4>\n        \n        <div class=\"form-field\">\n          <label>Project Name:</label>\n          <input formControlName=\"projectName\" placeholder=\"Enter project name\">\n          <div class=\"error-messages\">\n            <span *ngIf=\"getFieldError('projectName', 'required')\">Project name is required</span>\n          </div>\n        </div>\n        \n        <div class=\"form-field\">\n          <label>Admin Email:</label>\n          <input formControlName=\"adminEmail\" type=\"email\" placeholder=\"admin@company.com\">\n          <div class=\"error-messages\">\n            <span *ngIf=\"getFieldError('adminEmail', 'required')\">Admin email is required</span>\n            <span *ngIf=\"getFieldError('adminEmail', 'email')\">Invalid email format</span>\n            <span *ngIf=\"getFieldError('adminEmail', 'emailDomain')\">\n              Email must be from allowed domains: {{ getAllowedDomains() }}\n            </span>\n          </div>\n        </div>\n        \n        <div class=\"form-field\">\n          <label>Password:</label>\n          <input formControlName=\"password\" type=\"password\" placeholder=\"Enter strong password\">\n          <div class=\"error-messages\">\n            <span *ngIf=\"getFieldError('password', 'required')\">Password is required</span>\n            <div *ngIf=\"getFieldError('password', 'passwordStrength')\" class=\"password-requirements\">\n              <p>Password must contain:</p>\n              <ul>\n                <li [class.valid]=\"!getPasswordError('noUpperCase')\">At least one uppercase letter</li>\n                <li [class.valid]=\"!getPasswordError('noLowerCase')\">At least one lowercase letter</li>\n                <li [class.valid]=\"!getPasswordError('noNumeric')\">At least one number</li>\n                <li [class.valid]=\"!getPasswordError('noSpecial')\">At least one special character</li>\n                <li [class.valid]=\"!getPasswordError('minLength')\">At least 8 characters long</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Team Members -->\n      <div class=\"form-section\">\n        <h4>Team Members</h4>\n        <div formArrayName=\"teamMembers\">\n          <div *ngFor=\"let member of teamMembersArray.controls; let i = index\" \n               [formGroupName]=\"i\" class=\"team-member\">\n            <h5>Member {{ i + 1 }}</h5>\n            \n            <div class=\"member-fields\">\n              <div class=\"form-field\">\n                <label>Name:</label>\n                <input formControlName=\"name\" placeholder=\"Member name\">\n                <span *ngIf=\"getMemberFieldError(i, 'name', 'required')\" class=\"error\">\n                  Name is required\n                </span>\n              </div>\n              \n              <div class=\"form-field\">\n                <label>Email:</label>\n                <input formControlName=\"email\" type=\"email\" placeholder=\"member@company.com\">\n                <span *ngIf=\"getMemberFieldError(i, 'email', 'required')\" class=\"error\">\n                  Email is required\n                </span>\n                <span *ngIf=\"getMemberFieldError(i, 'email', 'email')\" class=\"error\">\n                  Invalid email\n                </span>\n              </div>\n              \n              <div class=\"form-field\">\n                <label>Role:</label>\n                <select formControlName=\"role\">\n                  <option value=\"\">Select role</option>\n                  <option value=\"developer\">Developer</option>\n                  <option value=\"designer\">Designer</option>\n                  <option value=\"manager\">Project Manager</option>\n                  <option value=\"tester\">QA Tester</option>\n                </select>\n                <span *ngIf=\"getMemberFieldError(i, 'role', 'required')\" class=\"error\">\n                  Role is required\n                </span>\n              </div>\n            </div>\n            \n            <button type=\"button\" (click)=\"removeMember(i)\" class=\"remove-btn\">\n              Remove Member\n            </button>\n          </div>\n        </div>\n        \n        <button type=\"button\" (click)=\"addMember()\" class=\"add-btn\">\n          Add Team Member\n        </button>\n      </div>\n      \n      <!-- Submit -->\n      <div class=\"form-actions\">\n        <button type=\"submit\" [disabled]=\"advancedForm.invalid\" class=\"submit-btn\">\n          Create Project\n        </button>\n        <button type=\"button\" (click)=\"resetForm()\" class=\"reset-btn\">\n          Reset Form\n        </button>\n      </div>\n      \n      <!-- Debug Info -->\n      <div class=\"form-debug\" *ngIf=\"showDebug\">\n        <h4>Form State:</h4>\n        <pre>{{ advancedForm.value | json }}</pre>\n        <p>Valid: {{ advancedForm.valid }}</p>\n        <p>Errors: {{ getFormErrors() | json }}</p>\n      </div>\n      \n      <button type=\"button\" (click)=\"showDebug = !showDebug\">\n        {{ showDebug ? 'Hide' : 'Show' }} Debug\n      </button>\n    </form>\n  `,\n  styles: [`\n    .advanced-form {\n      max-width: 800px;\n      margin: 20px auto;\n      padding: 20px;\n    }\n    .form-section {\n      margin-bottom: 30px;\n      padding: 20px;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n    }\n    .form-field {\n      margin-bottom: 15px;\n    }\n    .form-field label {\n      display: block;\n      margin-bottom: 5px;\n      font-weight: bold;\n    }\n    .form-field input, .form-field select {\n      width: 100%;\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n    }\n    .team-member {\n      background: #f8f9fa;\n      padding: 15px;\n      margin-bottom: 15px;\n      border-radius: 8px;\n      border: 1px solid #e9ecef;\n    }\n    .member-fields {\n      display: grid;\n      grid-template-columns: 1fr 1fr 1fr;\n      gap: 15px;\n      margin-bottom: 10px;\n    }\n    .error-messages {\n      color: #dc3545;\n      font-size: 0.9em;\n      margin-top: 5px;\n    }\n    .password-requirements {\n      margin-top: 10px;\n    }\n    .password-requirements ul {\n      margin: 5px 0;\n      padding-left: 20px;\n    }\n    .password-requirements li {\n      color: #dc3545;\n    }\n    .password-requirements li.valid {\n      color: #28a745;\n    }\n    .error {\n      color: #dc3545;\n      font-size: 0.9em;\n    }\n    .add-btn, .remove-btn, .submit-btn, .reset-btn {\n      padding: 10px 20px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      margin: 5px;\n    }\n    .add-btn {\n      background: #28a745;\n      color: white;\n    }\n    .remove-btn {\n      background: #dc3545;\n      color: white;\n    }\n    .submit-btn {\n      background: #007bff;\n      color: white;\n    }\n    .submit-btn:disabled {\n      background: #ccc;\n    }\n    .reset-btn {\n      background: #6c757d;\n      color: white;\n    }\n    .form-debug {\n      margin-top: 20px;\n      padding: 15px;\n      background: #f8f9fa;\n      border-radius: 4px;\n      font-family: monospace;\n    }\n  `]\n})\nexport class AdvancedFormComponent implements OnInit {\n  advancedForm!: FormGroup;\n  showDebug = false;\n  allowedDomains = ['company.com', 'organization.org', 'enterprise.net'];\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.initializeForm();\n  }\n\n  private initializeForm(): void {\n    this.advancedForm = this.fb.group({\n      projectName: ['', [Validators.required, Validators.minLength(3)]],\n      adminEmail: ['', [\n        Validators.required,\n        Validators.email,\n        emailDomainValidator(this.allowedDomains)\n      ]],\n      password: ['', [Validators.required, passwordStrengthValidator]],\n      teamMembers: this.fb.array([this.createMemberFormGroup()])\n    });\n  }\n\n  get teamMembersArray(): FormArray {\n    return this.advancedForm.get('teamMembers') as FormArray;\n  }\n\n  private createMemberFormGroup(): FormGroup {\n    return this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      role: ['', Validators.required]\n    });\n  }\n\n  addMember(): void {\n    this.teamMembersArray.push(this.createMemberFormGroup());\n  }\n\n  removeMember(index: number): void {\n    if (this.teamMembersArray.length > 1) {\n      this.teamMembersArray.removeAt(index);\n    }\n  }\n\n  getFieldError(fieldName: string, errorType: string): boolean {\n    const field = this.advancedForm.get(fieldName);\n    return field ? field.hasError(errorType) && field.touched : false;\n  }\n\n  getMemberFieldError(memberIndex: number, fieldName: string, errorType: string): boolean {\n    const member = this.teamMembersArray.at(memberIndex);\n    const field = member.get(fieldName);\n    return field ? field.hasError(errorType) && field.touched : false;\n  }\n\n  getPasswordError(errorType: string): boolean {\n    const passwordControl = this.advancedForm.get('password');\n    return passwordControl?.hasError('passwordStrength') && \n           passwordControl.errors?.['passwordStrength'][errorType];\n  }\n\n  getAllowedDomains(): string {\n    return this.allowedDomains.join(', ');\n  }\n\n  getFormErrors(): any {\n    const errors: any = {};\n    Object.keys(this.advancedForm.controls).forEach(key => {\n      const control = this.advancedForm.get(key);\n      if (control && control.errors) {\n        errors[key] = control.errors;\n      }\n    });\n    return errors;\n  }\n\n  onSubmit(): void {\n    if (this.advancedForm.valid) {\n      console.log('Form submitted:', this.advancedForm.value);\n      // Process form data\n    } else {\n      this.markFormGroupTouched(this.advancedForm);\n    }\n  }\n\n  resetForm(): void {\n    this.advancedForm.reset();\n    // Reset to initial state with one team member\n    while (this.teamMembersArray.length > 1) {\n      this.teamMembersArray.removeAt(1);\n    }\n  }\n\n  private markFormGroupTouched(formGroup: FormGroup): void {\n    Object.keys(formGroup.controls).forEach(key => {\n      const control = formGroup.get(key);\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      } else if (control instanceof FormArray) {\n        control.controls.forEach((arrayControl) => {\n          if (arrayControl instanceof FormGroup) {\n            this.markFormGroupTouched(arrayControl);\n          } else {\n            arrayControl.markAsTouched();\n          }\n        });\n      } else {\n        control?.markAsTouched();\n      }\n    });\n  }\n}",
      "explanation": "This advanced example demonstrates FormArray for dynamic form controls, custom validators, and complex form state management."
    }
  ],
  "exercises": [
    {
      "title": "Build a Dynamic Survey Form",
      "description": "Create a dynamic survey form that can add/remove questions of different types (text, multiple choice, rating).",
      "hints": [
        "Use FormArray for dynamic questions",
        "Create different FormGroup structures for different question types",
        "Implement custom validators for survey responses",
        "Add conditional validation based on question type",
        "Include survey metadata (title, description, etc.)"
      ],
      "solution": "// Dynamic Survey Form Implementation\n// This would be a comprehensive implementation with multiple question types,\n// dynamic validation, and survey result processing capabilities.\n// The solution demonstrates advanced reactive forms patterns."
    }
  ],
  "nextSection": "routing-basics",
  "previousSection": "dependency-injection"
}